//noinspection GroovyAssignabilityCheck

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:6.5.0.1'
    }
}

plugins {
    id 'org.springframework.boot' version "2.3.12.RELEASE"
    id "org.springframework.cloud.contract" version "2.1.5.RELEASE"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'java'
    id 'war'
    id 'groovy'
    id 'jacoco'
    id "org.sonarqube" version "3.3"
    id "org.liquibase.gradle" version "2.1.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.owasp.dependencycheck'

group = 'org.bookworm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.liquibase:liquibase-core:4.4.3'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    implementation 'com.auth0:java-jwt:3.18.2'
    implementation 'com.auth0:jwks-rsa:0.20.0'
    implementation 'org.zalando:logbook-spring-boot-starter:2.14.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'net.minidev:json-smart:2.4.7'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.codehaus.groovy:groovy:2.5.15'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    compileOnly 'org.liquibase:liquibase-gradle-plugin:2.0.4'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql:42.3.1'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.7.6'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.1.0"
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.intuit.karate:karate-core:1.1.0'
    testImplementation 'com.intuit.karate:karate-junit5:1.1.0'
    testImplementation platform('org.spockframework:spock-bom:2.0-groovy-2.5')
    testImplementation 'org.spockframework:spock-core:2.0-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:2.0-groovy-2.5'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.2'
    testImplementation 'io.rest-assured:rest-assured:4.2.1'
    testImplementation 'io.rest-assured:spring-mock-mvc:4.2.1'
    testImplementation 'io.rest-assured:json-path:4.2.1'
    testImplementation 'io.rest-assured:xml-path:4.2.1'
}

bootJar {
    layered()
    manifest {
        attributes 'Start-Class': 'org.bookworm.library.LibraryApplication'
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "org.bookworm:bookworm-backend"
        property "sonar.projectName", "bookworm-backend"
        property "sonar.coverage.exclusions", "src/main/java/org/bookworm/library/dto/**/*, src/main/java/org/bookworm/library/entities/**/*, src/main/java/org/bookworm/library/security/**/*, src/main/java/org/bookworm/library/*"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.binaries", "build/classes"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/*"
        property "sonar.verbose", "true"
        property "sonar.log.level", "TRACE"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled false
    }
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

test {
    useJUnitPlatform()
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    outputs.upToDateWhen { false }
    finalizedBy jacocoTestReport
}

check.dependsOn jacocoTestCoverageVerification

task karateDebug(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.intuit.karate.cli.Main'
}

task printSourceSetInformation() {
    doLast {
        sourceSets.each { srcSet ->
            println "[" + srcSet.name + "]"
            print "-->Source directories: " + srcSet.allJava.srcDirs + "\n"
            print "-->Output directories: " + srcSet.output.classesDirs.files + "\n"
//            print "-->Compile classpath:\n"
//            srcSet.compileClasspath.files.each {
//                print "  " + it.path + "\n"
//            }
            println ""
        }
    }
}
