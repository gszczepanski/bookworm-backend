default:
  image: docker:20.10.12

variables:
  CI_REGISTRY: $CI_REGISTRY
  CI_DEPLOY_USER: $CI_DEPLOY_USER
  CI_DEPLOY_PASSWORD: $CI_DEPLOY_PASSWORD
  CI_PROJECT_NAME: $CI_PROJECT_NAME
  CI_COMMIT_REF_SLUG: $CI_COMMIT_REF_SLUG
  PROJECT_REGISTRY_PATH: $CI_REGISTRY_IMAGE
  BACKEND_IMAGE_PATH: $PROJECT_REGISTRY_PATH/bookworm_backend:$CI_COMMIT_SHORT_SHA
  POSTGRES_IMAGE_PATH: $PROJECT_REGISTRY_PATH/bookworm_postgres:$CI_COMMIT_SHORT_SHA
  BOOKWORM_HOST: $BOOKWORM_HOST
  SONAR_TOKEN: $SONAR_TOKEN
  SONAR_HOST_URL: $SONAR_HOST_URL
  SONAR_PROJECT_KEY: org.bookworm:$CI_PROJECT_NAME
  GIT_DEPTH: 0
  DOCKER_TLS_CERTDIR: "/certs"
  # for gitlab-runner kubernetes executor only
  # DOCKER_HOST: tcp://docker:2376
  # DOCKER_TLS_VERIFY: 1
  # DOCKER_CERT_PATH: $DOCKER_TLS_CERTDIR/client

services:
  - docker:20.10.12-dind

cache: &global_cache
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .gradle/**
    - build/libs/bookworm-backend-0.0.1-SNAPSHOT.jar
    - build/classes/**
    - build/jacoco/**
    - build/reports/jacoco/**
  policy: pull-push

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

stages:
  - application
  - infrastructure
  - test
  - analyze
#  - deploy

build-backend:
  stage: application
  image: gradle:6-jdk11-alpine
  cache:
    <<: *global_cache
    policy: push
  script:
    - gradle bootJar --build-cache --warning-mode all

build-backend-image:
  stage: infrastructure
  needs:
    - job: build-backend
  cache:
    <<: *global_cache
    policy: pull
  script:
    - ln ./build/libs/bookworm-backend-0.0.1-SNAPSHOT.jar ./docker/bookworm_backend/bookworm-backend-0.0.1-SNAPSHOT.jar
    - cd docker/bookworm_backend
    - docker build -t bookworm_backend .
    - docker tag bookworm_backend $BACKEND_IMAGE_PATH
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker push $BACKEND_IMAGE_PATH

build-postgres-image:
  stage: infrastructure
  needs:
    - job: build-backend
  script:
    - cd docker/bookworm_postgres
    - docker build -t bookworm_postgres .
    - docker tag bookworm_postgres $POSTGRES_IMAGE_PATH
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $PROJECT_REGISTRY_PATH
    - docker push $POSTGRES_IMAGE_PATH

test-backend-api:
  stage: test
  needs:
    - job: build-backend-image
    - job: build-postgres-image
  cache:
    <<: *global_cache
    policy: pull
  script:
    - docker info
    - apk update && apk add --no-cache bash && apk add --no-cache sudo && apk add --no-cache curl
    - sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - sudo chmod +x /usr/local/bin/docker-compose
    - docker-compose --version
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $PROJECT_REGISTRY_PATH
    - docker pull $BACKEND_IMAGE_PATH
    - docker tag $BACKEND_IMAGE_PATH bookworm_backend:latest
    - docker pull $POSTGRES_IMAGE_PATH
    - docker tag $POSTGRES_IMAGE_PATH bookworm_postgres:latest
    - cd docker && chmod +x ./wait-for-it.sh
    - docker-compose up -d bookworm_postgres && ./wait-for-it.sh --timeout=300 $BOOKWORM_HOST:5432
    - docker-compose up -d bookworm_keycloak && ./wait-for-it.sh --timeout=300 $BOOKWORM_HOST:9080
    - docker-compose up -d bookworm_backend && ./wait-for-it.sh --timeout=300 $BOOKWORM_HOST:8080
    - cd ..
    - apk add --no-cache gradle
    - gradle check -Dkarate.env=test
  artifacts:
    untracked: true
    paths:
      - build/karate-reports/**
      - build/reports/**
    expire_in: 1 hour

sonar-analysis:
  stage: analyze
  image: gradle:6-jdk11-alpine
  needs:
    - job: test-backend-api
  cache:
    <<: *global_cache
    policy: pull
  script:
    - apk update && apk add nodejs
    - gradle build jacocoTestReport sonarqube -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$SONAR_PROJECT_KEY --exclude-task test
  allow_failure: true
  only:
    - devel

owasp-check:
  stage: analyze
  image: gradle:6-jdk11-alpine
  needs:
    - job: build-backend
  cache:
    <<: *global_cache
    policy: pull
  script:
    - gradle dependencyCheckAnalyze
  allow_failure: true
  when: manual
  only:
    - devel
  artifacts:
    untracked: true
    paths:
      - build/reports/dependency-check-report.html
    expire_in: 1 hour
